1. First reverse engineering phase (using Notepad++, python & MAME)

- Disassembled the ROM ($C000-$FFFF)
- Found old remainders of source code in the end. Useful to start naming variables
- Some opcodes are encrypted, and MAME fails to decrypt them, so disassembly is done again
  with a custom python script & capstone.
- MAME sources copied for reference
- named the variables that MAME cheat reveals (number of lives, time... whatever)
- First attempt at converting to 68k using my converter tool, had to fix a small
- issue in the converter. Too soon to work on it, but it was just to test
- Memory map & I/O copied from MAME source into the disassembly
- Tagged the addresses of the dummy writes (should have done that firsthand)
  to be able to remove them grrrr...
- So... wasted 5 minutes to write a script to fix the already processed asm...
- identified the location where the number of credits is written on screen
- identified credits variable ($1f) by following the source of the char written for credits
- removed the non-code parts (we'll use the ROM binary images to read the data)
- dumped the sprites & tiles using MAME - tile saving edition
- re-worked the decryption because it was wrong. Also crossed the data with a custom MAME
  build where decrypted opcodes + offsets were logged (very useful!)
  
2. Build the executable

- keeping old private versions of "graphics.68k", and other generated stuff copied from pooyan
  just for it to link
- extracted data offsets
- enhanced 6502 to 68k converter :)
- ran the conversion to 68k
- started to fix .error directives, adapted code
- fixed missing entrypoints
- coded the important "get_address" function to select which memory bank is read/written to
